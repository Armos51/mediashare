// tslint:disable
/**
 * Media Share API
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CreateMediaItemDto,
} from '../models';

export interface MediaItemControllerCreateRequest {
    createMediaItemDto: CreateMediaItemDto;
}

export interface MediaItemControllerFindOneRequest {
    id: string;
}

export interface MediaItemControllerRemoveRequest {
    id: string;
}

export interface MediaItemControllerShareRequest {
    id: string;
    userId: string;
}

export interface MediaItemControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * no description
 */
export class MediaItemsApi extends BaseAPI {

    /**
     */
    mediaItemControllerCreate({ createMediaItemDto }: MediaItemControllerCreateRequest): Observable<void>
    mediaItemControllerCreate({ createMediaItemDto }: MediaItemControllerCreateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerCreate({ createMediaItemDto }: MediaItemControllerCreateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(createMediaItemDto, 'createMediaItemDto', 'mediaItemControllerCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/media-items',
            method: 'POST',
            headers,
            body: createMediaItemDto,
        }, opts?.responseOpts);
    };

    /**
     */
    mediaItemControllerFindAll(): Observable<void>
    mediaItemControllerFindAll(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerFindAll(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/api/media-items',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    mediaItemControllerFindOne({ id }: MediaItemControllerFindOneRequest): Observable<void>
    mediaItemControllerFindOne({ id }: MediaItemControllerFindOneRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerFindOne({ id }: MediaItemControllerFindOneRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'mediaItemControllerFindOne');

        return this.request<void>({
            url: '/api/media-items/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    mediaItemControllerGetCategories(): Observable<void>
    mediaItemControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/api/media-items/categories',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    mediaItemControllerRemove({ id }: MediaItemControllerRemoveRequest): Observable<void>
    mediaItemControllerRemove({ id }: MediaItemControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerRemove({ id }: MediaItemControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'mediaItemControllerRemove');

        return this.request<void>({
            url: '/api/media-items/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    mediaItemControllerShare({ id, userId }: MediaItemControllerShareRequest): Observable<void>
    mediaItemControllerShare({ id, userId }: MediaItemControllerShareRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerShare({ id, userId }: MediaItemControllerShareRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'mediaItemControllerShare');
        throwIfNullOrUndefined(userId, 'userId', 'mediaItemControllerShare');

        return this.request<void>({
            url: '/api/media-items/{id}/share/{userId}'.replace('{id}', encodeURI(id)).replace('{userId}', encodeURI(userId)),
            method: 'POST',
        }, opts?.responseOpts);
    };

    /**
     */
    mediaItemControllerUpdate({ id, body }: MediaItemControllerUpdateRequest): Observable<void>
    mediaItemControllerUpdate({ id, body }: MediaItemControllerUpdateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    mediaItemControllerUpdate({ id, body }: MediaItemControllerUpdateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'mediaItemControllerUpdate');
        throwIfNullOrUndefined(body, 'body', 'mediaItemControllerUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/media-items/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: body as any,
        }, opts?.responseOpts);
    };

}
