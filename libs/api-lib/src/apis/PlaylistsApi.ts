// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { CreatePlaylistDto, Playlist, ShareItem, UpdatePlaylistDto } from '../models';

export interface PlaylistControllerCreateRequest {
  createPlaylistDto: CreatePlaylistDto;
}

export interface PlaylistControllerFindOneRequest {
  id: string;
}

export interface PlaylistControllerRemoveRequest {
  id: string;
}

export interface PlaylistControllerShareRequest {
  id: string;
  userId: string;
}

export interface PlaylistControllerUpdateRequest {
  id: string;
  updatePlaylistDto: UpdatePlaylistDto;
}

/**
 * no description
 */
export class PlaylistsApi extends BaseAPI {
  /**
   */
  playlistControllerCreate({ createPlaylistDto }: PlaylistControllerCreateRequest): Observable<Playlist>;
  playlistControllerCreate(
    { createPlaylistDto }: PlaylistControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Playlist>>;
  playlistControllerCreate(
    { createPlaylistDto }: PlaylistControllerCreateRequest,
    opts?: OperationOpts
  ): Observable<Playlist | RawAjaxResponse<Playlist>> {
    throwIfNullOrUndefined(createPlaylistDto, 'createPlaylistDto', 'playlistControllerCreate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Playlist>(
      {
        url: '/api/playlists',
        method: 'POST',
        headers,
        body: createPlaylistDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerFindAll(): Observable<Array<Playlist>>;
  playlistControllerFindAll(opts?: OperationOpts): Observable<RawAjaxResponse<Array<Playlist>>>;
  playlistControllerFindAll(opts?: OperationOpts): Observable<Array<Playlist> | RawAjaxResponse<Array<Playlist>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<Playlist>>(
      {
        url: '/api/playlists',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerFindOne({ id }: PlaylistControllerFindOneRequest): Observable<Playlist>;
  playlistControllerFindOne(
    { id }: PlaylistControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Playlist>>;
  playlistControllerFindOne(
    { id }: PlaylistControllerFindOneRequest,
    opts?: OperationOpts
  ): Observable<Playlist | RawAjaxResponse<Playlist>> {
    throwIfNullOrUndefined(id, 'id', 'playlistControllerFindOne');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Playlist>(
      {
        url: '/api/playlists/{id}'.replace('{id}', encodeURI(id)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerGetCategories(): Observable<void>;
  playlistControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  playlistControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/playlists/categories',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerRemove({ id }: PlaylistControllerRemoveRequest): Observable<void>;
  playlistControllerRemove(
    { id }: PlaylistControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  playlistControllerRemove(
    { id }: PlaylistControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(id, 'id', 'playlistControllerRemove');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<void>(
      {
        url: '/api/playlists/{id}'.replace('{id}', encodeURI(id)),
        method: 'DELETE',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerShare({ id, userId }: PlaylistControllerShareRequest): Observable<Array<ShareItem>>;
  playlistControllerShare(
    { id, userId }: PlaylistControllerShareRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<ShareItem>>>;
  playlistControllerShare(
    { id, userId }: PlaylistControllerShareRequest,
    opts?: OperationOpts
  ): Observable<Array<ShareItem> | RawAjaxResponse<Array<ShareItem>>> {
    throwIfNullOrUndefined(id, 'id', 'playlistControllerShare');
    throwIfNullOrUndefined(userId, 'userId', 'playlistControllerShare');

    return this.request<Array<ShareItem>>(
      {
        url: '/api/playlists/{id}/share/{userId}'.replace('{id}', encodeURI(id)).replace('{userId}', encodeURI(userId)),
        method: 'POST',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  playlistControllerUpdate({ id, updatePlaylistDto }: PlaylistControllerUpdateRequest): Observable<void>;
  playlistControllerUpdate(
    { id, updatePlaylistDto }: PlaylistControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  playlistControllerUpdate(
    { id, updatePlaylistDto }: PlaylistControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(id, 'id', 'playlistControllerUpdate');
    throwIfNullOrUndefined(updatePlaylistDto, 'updatePlaylistDto', 'playlistControllerUpdate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<void>(
      {
        url: '/api/playlists/{id}'.replace('{id}', encodeURI(id)),
        method: 'PUT',
        headers,
        body: updatePlaylistDto,
      },
      opts?.responseOpts
    );
  }
}
