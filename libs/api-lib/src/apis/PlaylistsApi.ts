// tslint:disable
/**
 * Media Share API
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CreatePlaylistDto,
    UpdatePlaylistDto,
} from '../models';

export interface PlaylistControllerCreateRequest {
    createPlaylistDto: CreatePlaylistDto;
}

export interface PlaylistControllerFindOneRequest {
    id: string;
}

export interface PlaylistControllerRemoveRequest {
    id: string;
}

export interface PlaylistControllerShareRequest {
    id: string;
    userId: string;
}

export interface PlaylistControllerUpdateRequest {
    id: string;
    updatePlaylistDto: UpdatePlaylistDto;
}

/**
 * no description
 */
export class PlaylistsApi extends BaseAPI {

    /**
     */
    playlistControllerCreate({ createPlaylistDto }: PlaylistControllerCreateRequest): Observable<void>
    playlistControllerCreate({ createPlaylistDto }: PlaylistControllerCreateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerCreate({ createPlaylistDto }: PlaylistControllerCreateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(createPlaylistDto, 'createPlaylistDto', 'playlistControllerCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/playlists',
            method: 'POST',
            headers,
            body: createPlaylistDto,
        }, opts?.responseOpts);
    };

    /**
     */
    playlistControllerFindAll(): Observable<void>
    playlistControllerFindAll(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerFindAll(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/api/playlists',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    playlistControllerFindOne({ id }: PlaylistControllerFindOneRequest): Observable<void>
    playlistControllerFindOne({ id }: PlaylistControllerFindOneRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerFindOne({ id }: PlaylistControllerFindOneRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'playlistControllerFindOne');

        return this.request<void>({
            url: '/api/playlists/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    playlistControllerGetCategories(): Observable<void>
    playlistControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerGetCategories(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        return this.request<void>({
            url: '/api/playlists/categories',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    playlistControllerRemove({ id }: PlaylistControllerRemoveRequest): Observable<void>
    playlistControllerRemove({ id }: PlaylistControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerRemove({ id }: PlaylistControllerRemoveRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'playlistControllerRemove');

        return this.request<void>({
            url: '/api/playlists/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     */
    playlistControllerShare({ id, userId }: PlaylistControllerShareRequest): Observable<void>
    playlistControllerShare({ id, userId }: PlaylistControllerShareRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerShare({ id, userId }: PlaylistControllerShareRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'playlistControllerShare');
        throwIfNullOrUndefined(userId, 'userId', 'playlistControllerShare');

        return this.request<void>({
            url: '/api/playlists/{id}/share/{userId}'.replace('{id}', encodeURI(id)).replace('{userId}', encodeURI(userId)),
            method: 'POST',
        }, opts?.responseOpts);
    };

    /**
     */
    playlistControllerUpdate({ id, updatePlaylistDto }: PlaylistControllerUpdateRequest): Observable<void>
    playlistControllerUpdate({ id, updatePlaylistDto }: PlaylistControllerUpdateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    playlistControllerUpdate({ id, updatePlaylistDto }: PlaylistControllerUpdateRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'playlistControllerUpdate');
        throwIfNullOrUndefined(updatePlaylistDto, 'updatePlaylistDto', 'playlistControllerUpdate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/playlists/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: updatePlaylistDto,
        }, opts?.responseOpts);
    };

}
