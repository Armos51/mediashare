// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { MediaItemDto, Playlist, TokenDto, UserDto } from '../models';

export interface UserControllerAuthorizeRequest {
  id: string;
  tokenDto: TokenDto;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {
  /**
   */
  userControllerAuthorize({ id, tokenDto }: UserControllerAuthorizeRequest): Observable<void>;
  userControllerAuthorize(
    { id, tokenDto }: UserControllerAuthorizeRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  userControllerAuthorize(
    { id, tokenDto }: UserControllerAuthorizeRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(id, 'id', 'userControllerAuthorize');
    throwIfNullOrUndefined(tokenDto, 'tokenDto', 'userControllerAuthorize');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<void>(
      {
        url: '/api/user/authorize'.replace('{:id}', encodeURI(id)),
        method: 'POST',
        headers,
        body: tokenDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetShareItems(): Observable<void>;
  userControllerGetShareItems(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  userControllerGetShareItems(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/user/share-items',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetSharedMediaItems(): Observable<Array<MediaItemDto>>;
  userControllerGetSharedMediaItems(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemDto>>>;
  userControllerGetSharedMediaItems(
    opts?: OperationOpts
  ): Observable<Array<MediaItemDto> | RawAjaxResponse<Array<MediaItemDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<MediaItemDto>>(
      {
        url: '/api/user/shared-media-items',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetSharedPlaylists(): Observable<Array<Playlist>>;
  userControllerGetSharedPlaylists(opts?: OperationOpts): Observable<RawAjaxResponse<Array<Playlist>>>;
  userControllerGetSharedPlaylists(
    opts?: OperationOpts
  ): Observable<Array<Playlist> | RawAjaxResponse<Array<Playlist>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<Playlist>>(
      {
        url: '/api/user/shared-playlists',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetUser(): Observable<UserDto>;
  userControllerGetUser(opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  userControllerGetUser(opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/user',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }
}
