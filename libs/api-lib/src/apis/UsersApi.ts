// tslint:disable
/**
 *
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import { MediaItemDto, Playlist, ShareItem, UpdateUserDto, UserDto } from '../models';

export interface UsersControllerGetShareItemsRequest {
  id: string;
}

export interface UsersControllerRemoveRequest {
  userId: string;
}

export interface UsersControllerSetRolesRequest {
  userId: string;
  requestBody: Array<string>;
}

export interface UsersControllerUpdateRequest {
  updateUserDto: UpdateUserDto;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {
  /**
   */
  usersControllerCreate(): Observable<UserDto>;
  usersControllerCreate(opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  usersControllerCreate(opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    return this.request<UserDto>(
      {
        url: '/api/users',
        method: 'POST',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerFindAll(): Observable<Array<UserDto>>;
  usersControllerFindAll(opts?: OperationOpts): Observable<RawAjaxResponse<Array<UserDto>>>;
  usersControllerFindAll(opts?: OperationOpts): Observable<Array<UserDto> | RawAjaxResponse<Array<UserDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<UserDto>>(
      {
        url: '/api/users',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerFindOne(): Observable<UserDto>;
  usersControllerFindOne(opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  usersControllerFindOne(opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/users/{userId}',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerGetMedia(): Observable<Array<MediaItemDto>>;
  usersControllerGetMedia(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemDto>>>;
  usersControllerGetMedia(
    opts?: OperationOpts
  ): Observable<Array<MediaItemDto> | RawAjaxResponse<Array<MediaItemDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<MediaItemDto>>(
      {
        url: '/api/users/{id}/media-items',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerGetPlaylists(): Observable<Array<Playlist>>;
  usersControllerGetPlaylists(opts?: OperationOpts): Observable<RawAjaxResponse<Array<Playlist>>>;
  usersControllerGetPlaylists(opts?: OperationOpts): Observable<Array<Playlist> | RawAjaxResponse<Array<Playlist>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<Playlist>>(
      {
        url: '/api/users/{userId}/playlists',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerGetShareItems({ id }: UsersControllerGetShareItemsRequest): Observable<Array<ShareItem>>;
  usersControllerGetShareItems(
    { id }: UsersControllerGetShareItemsRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<Array<ShareItem>>>;
  usersControllerGetShareItems(
    { id }: UsersControllerGetShareItemsRequest,
    opts?: OperationOpts
  ): Observable<Array<ShareItem> | RawAjaxResponse<Array<ShareItem>>> {
    throwIfNullOrUndefined(id, 'id', 'usersControllerGetShareItems');

    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<ShareItem>>(
      {
        url: '/api/users/{userId}/share-items'.replace('{id}', encodeURI(id)),
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerReadSharedItem(): Observable<UserDto>;
  usersControllerReadSharedItem(opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  usersControllerReadSharedItem(opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    return this.request<UserDto>(
      {
        url: '/api/users/shared-items/{shareId}',
        method: 'POST',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerRemove({ userId }: UsersControllerRemoveRequest): Observable<void>;
  usersControllerRemove(
    { userId }: UsersControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>>;
  usersControllerRemove(
    { userId }: UsersControllerRemoveRequest,
    opts?: OperationOpts
  ): Observable<void | RawAjaxResponse<void>> {
    throwIfNullOrUndefined(userId, 'userId', 'usersControllerRemove');

    return this.request<void>(
      {
        url: '/api/users/{userId}'.replace('{userId}', encodeURI(userId)),
        method: 'DELETE',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerSetRoles({ userId, requestBody }: UsersControllerSetRolesRequest): Observable<UserDto>;
  usersControllerSetRoles(
    { userId, requestBody }: UsersControllerSetRolesRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  usersControllerSetRoles(
    { userId, requestBody }: UsersControllerSetRolesRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(userId, 'userId', 'usersControllerSetRoles');
    throwIfNullOrUndefined(requestBody, 'requestBody', 'usersControllerSetRoles');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/users/{userId}/roles'.replace('{userId}', encodeURI(userId)),
        method: 'PUT',
        headers,
        body: requestBody,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  usersControllerUpdate({ updateUserDto }: UsersControllerUpdateRequest): Observable<UserDto>;
  usersControllerUpdate(
    { updateUserDto }: UsersControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<RawAjaxResponse<UserDto>>;
  usersControllerUpdate(
    { updateUserDto }: UsersControllerUpdateRequest,
    opts?: OperationOpts
  ): Observable<UserDto | RawAjaxResponse<UserDto>> {
    throwIfNullOrUndefined(updateUserDto, 'updateUserDto', 'usersControllerUpdate');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<UserDto>(
      {
        url: '/api/users/{userId}',
        method: 'PUT',
        headers,
        body: updateUserDto,
      },
      opts?.responseOpts
    );
  }
}
