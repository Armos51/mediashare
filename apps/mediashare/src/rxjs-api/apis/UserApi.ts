// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, OperationOpts, RawAjaxResponse } from '../runtime';
import { LoginResponseDto, MediaItemDto, PlaylistResponseDto, ShareItem, TokenDto, UserDto } from '../models';

export interface UserControllerAuthorizeRequest {
  tokenDto: TokenDto;
}

/**
 * no description
 */
export class UserApi extends BaseAPI {
  /**
   */
  userControllerAuthorize({ tokenDto }: UserControllerAuthorizeRequest): Observable<LoginResponseDto>;
  userControllerAuthorize({ tokenDto }: UserControllerAuthorizeRequest, opts?: OperationOpts): Observable<RawAjaxResponse<LoginResponseDto>>;
  userControllerAuthorize(
    { tokenDto }: UserControllerAuthorizeRequest,
    opts?: OperationOpts
  ): Observable<LoginResponseDto | RawAjaxResponse<LoginResponseDto>> {
    throwIfNullOrUndefined(tokenDto, 'tokenDto', 'userControllerAuthorize');

    const headers: HttpHeaders = {
      'Content-Type': 'application/json',
    };

    return this.request<LoginResponseDto>(
      {
        url: '/api/user/authorize',
        method: 'POST',
        headers,
        body: tokenDto,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetMediaItems(): Observable<Array<MediaItemDto>>;
  userControllerGetMediaItems(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemDto>>>;
  userControllerGetMediaItems(opts?: OperationOpts): Observable<Array<MediaItemDto> | RawAjaxResponse<Array<MediaItemDto>>> {
    return this.request<Array<MediaItemDto>>(
      {
        url: '/api/user/media-items',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetMyShareItems(): Observable<Array<ShareItem>>;
  userControllerGetMyShareItems(opts?: OperationOpts): Observable<RawAjaxResponse<Array<ShareItem>>>;
  userControllerGetMyShareItems(opts?: OperationOpts): Observable<Array<ShareItem> | RawAjaxResponse<Array<ShareItem>>> {
    return this.request<Array<ShareItem>>(
      {
        url: '/api/user/playlists/shared',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetSharedMediaItems(): Observable<Array<MediaItemDto>>;
  userControllerGetSharedMediaItems(opts?: OperationOpts): Observable<RawAjaxResponse<Array<MediaItemDto>>>;
  userControllerGetSharedMediaItems(opts?: OperationOpts): Observable<Array<MediaItemDto> | RawAjaxResponse<Array<MediaItemDto>>> {
    return this.request<Array<MediaItemDto>>(
      {
        url: '/api/user/media-items/shared',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetUser(): Observable<UserDto>;
  userControllerGetUser(opts?: OperationOpts): Observable<RawAjaxResponse<UserDto>>;
  userControllerGetUser(opts?: OperationOpts): Observable<UserDto | RawAjaxResponse<UserDto>> {
    return this.request<UserDto>(
      {
        url: '/api/user',
        method: 'GET',
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerGetUserPlaylists(): Observable<Array<PlaylistResponseDto>>;
  userControllerGetUserPlaylists(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PlaylistResponseDto>>>;
  userControllerGetUserPlaylists(opts?: OperationOpts): Observable<Array<PlaylistResponseDto> | RawAjaxResponse<Array<PlaylistResponseDto>>> {
    const headers: HttpHeaders = {
      ...(this.configuration.username != null && this.configuration.password != null
        ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` }
        : undefined),
    };

    return this.request<Array<PlaylistResponseDto>>(
      {
        url: '/api/user/playlists',
        method: 'GET',
        headers,
      },
      opts?.responseOpts
    );
  }

  /**
   */
  userControllerLogout(): Observable<void>;
  userControllerLogout(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>;
  userControllerLogout(opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
    return this.request<void>(
      {
        url: '/api/user/logout',
        method: 'POST',
      },
      opts?.responseOpts
    );
  }
}
