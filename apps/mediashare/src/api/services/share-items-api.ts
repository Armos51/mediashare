/* tslint:disable */
/* eslint-disable */
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ShareItem } from '../models';
/**
 * ShareItemsApi - axios parameter creator
 * @export
 */
export const ShareItemsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/share-items`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindOne: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('shareItemsControllerFindOne', 'shareId', shareId);
      const localVarPath = `/api/share-items/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerReadSharedItem: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('shareItemsControllerReadSharedItem', 'shareId', shareId);
      const localVarPath = `/api/share-items/read/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerRemove: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('shareItemsControllerRemove', 'shareId', shareId);
      const localVarPath = `/api/share-items/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShareItemsApi - functional programming interface
 * @export
 */
export const ShareItemsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShareItemsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShareItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerFindOne(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerFindOne(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerReadSharedItem(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerReadSharedItem(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerRemove(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerRemove(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ShareItemsApi - factory interface
 * @export
 */
export const ShareItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ShareItemsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindAll(options?: any): AxiosPromise<Array<ShareItem>> {
      return localVarFp.shareItemsControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindOne(shareId: string, options?: any): AxiosPromise<ShareItem> {
      return localVarFp.shareItemsControllerFindOne(shareId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerReadSharedItem(shareId: string, options?: any): AxiosPromise<ShareItem> {
      return localVarFp.shareItemsControllerReadSharedItem(shareId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerRemove(shareId: string, options?: any): AxiosPromise<ShareItem> {
      return localVarFp.shareItemsControllerRemove(shareId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for shareItemsControllerFindOne operation in ShareItemsApi.
 * @export
 * @interface ShareItemsApiShareItemsControllerFindOneRequest
 */
export interface ShareItemsApiShareItemsControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof ShareItemsApiShareItemsControllerFindOne
   */
  readonly shareId: string;
}

/**
 * Request parameters for shareItemsControllerReadSharedItem operation in ShareItemsApi.
 * @export
 * @interface ShareItemsApiShareItemsControllerReadSharedItemRequest
 */
export interface ShareItemsApiShareItemsControllerReadSharedItemRequest {
  /**
   *
   * @type {string}
   * @memberof ShareItemsApiShareItemsControllerReadSharedItem
   */
  readonly shareId: string;
}

/**
 * Request parameters for shareItemsControllerRemove operation in ShareItemsApi.
 * @export
 * @interface ShareItemsApiShareItemsControllerRemoveRequest
 */
export interface ShareItemsApiShareItemsControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof ShareItemsApiShareItemsControllerRemove
   */
  readonly shareId: string;
}

/**
 * ShareItemsApi - object-oriented interface
 * @export
 * @class ShareItemsApi
 * @extends {BaseAPI}
 */
export class ShareItemsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerFindAll(options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ShareItemsApiShareItemsControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerFindOne(requestParameters: ShareItemsApiShareItemsControllerFindOneRequest, options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerFindOne(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ShareItemsApiShareItemsControllerReadSharedItemRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerReadSharedItem(requestParameters: ShareItemsApiShareItemsControllerReadSharedItemRequest, options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerReadSharedItem(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ShareItemsApiShareItemsControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerRemove(requestParameters: ShareItemsApiShareItemsControllerRemoveRequest, options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerRemove(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
