/* tslint:disable */
/* eslint-disable */
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PlaylistResponseDto } from '../models';
// @ts-ignore
import { UpdateUserDto } from '../models';
// @ts-ignore
import { UserDto } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne: async (userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerFindOne', 'userId', userId);
      const localVarPath = `/api/users/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetPlaylists: async (userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerGetPlaylists', 'userId', userId);
      const localVarPath = `/api/users/{userId}/playlists`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerReadSharedItem: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('usersControllerReadSharedItem', 'shareId', shareId);
      const localVarPath = `/api/users/shared-items/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove: async (userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerRemove', 'userId', userId);
      const localVarPath = `/api/users/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerSetRoles: async (userId: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerSetRoles', 'userId', userId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('usersControllerSetRoles', 'requestBody', requestBody);
      const localVarPath = `/api/users/{userId}/roles`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate: async (userId: string, updateUserDto: UpdateUserDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerUpdate', 'userId', userId);
      // verify required parameter 'updateUserDto' is not null or undefined
      assertParamExists('usersControllerUpdate', 'updateUserDto', updateUserDto);
      const localVarPath = `/api/users/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerFindOne(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerGetPlaylists(
      userId: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlaylistResponseDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetPlaylists(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerReadSharedItem(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerReadSharedItem(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerRemove(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerSetRoles(
      userId: string,
      requestBody: Array<string>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerSetRoles(userId, requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerUpdate(
      userId: string,
      updateUserDto: UpdateUserDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(userId, updateUserDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll(options?: any): AxiosPromise<Array<UserDto>> {
      return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne(userId: string, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerFindOne(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetPlaylists(userId: string, options?: any): AxiosPromise<Array<PlaylistResponseDto>> {
      return localVarFp.usersControllerGetPlaylists(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerReadSharedItem(shareId: string, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerReadSharedItem(shareId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove(userId: string, options?: any): AxiosPromise<void> {
      return localVarFp.usersControllerRemove(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerSetRoles(userId: string, requestBody: Array<string>, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerSetRoles(userId, requestBody, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate(userId: string, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerUpdate(userId, updateUserDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for usersControllerFindOne operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerFindOneRequest
 */
export interface UsersApiUsersControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerFindOne
   */
  readonly userId: string;
}

/**
 * Request parameters for usersControllerGetPlaylists operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerGetPlaylistsRequest
 */
export interface UsersApiUsersControllerGetPlaylistsRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerGetPlaylists
   */
  readonly userId: string;
}

/**
 * Request parameters for usersControllerReadSharedItem operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerReadSharedItemRequest
 */
export interface UsersApiUsersControllerReadSharedItemRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerReadSharedItem
   */
  readonly shareId: string;
}

/**
 * Request parameters for usersControllerRemove operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerRemoveRequest
 */
export interface UsersApiUsersControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerRemove
   */
  readonly userId: string;
}

/**
 * Request parameters for usersControllerSetRoles operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerSetRolesRequest
 */
export interface UsersApiUsersControllerSetRolesRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerSetRoles
   */
  readonly userId: string;

  /**
   *
   * @type {Array<string>}
   * @memberof UsersApiUsersControllerSetRoles
   */
  readonly requestBody: Array<string>;
}

/**
 * Request parameters for usersControllerUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerUpdateRequest
 */
export interface UsersApiUsersControllerUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerUpdate
   */
  readonly userId: string;

  /**
   *
   * @type {UpdateUserDto}
   * @memberof UsersApiUsersControllerUpdate
   */
  readonly updateUserDto: UpdateUserDto;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerFindAll(options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerFindOne(requestParameters: UsersApiUsersControllerFindOneRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerFindOne(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerGetPlaylistsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerGetPlaylists(requestParameters: UsersApiUsersControllerGetPlaylistsRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerGetPlaylists(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerReadSharedItemRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerReadSharedItem(requestParameters: UsersApiUsersControllerReadSharedItemRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerReadSharedItem(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerRemove(requestParameters: UsersApiUsersControllerRemoveRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerRemove(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerSetRolesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerSetRoles(requestParameters: UsersApiUsersControllerSetRolesRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerSetRoles(requestParameters.userId, requestParameters.requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerUpdate(requestParameters: UsersApiUsersControllerUpdateRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerUpdate(requestParameters.userId, requestParameters.updateUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
