/* tslint:disable */
/* eslint-disable */
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ViewItem } from '../models';
/**
 * ViewsApi - axios parameter creator
 * @export
 */
export const ViewsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsControllerCreateMediaView: async (mediaId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('viewsControllerCreateMediaView', 'mediaId', mediaId);
      const localVarPath = `/api/views/mediaItem/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsControllerCreatePlaylistView: async (playlistId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('viewsControllerCreatePlaylistView', 'playlistId', playlistId);
      const localVarPath = `/api/views/playlist/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ViewsApi - functional programming interface
 * @export
 */
export const ViewsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ViewsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async viewsControllerCreateMediaView(mediaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.viewsControllerCreateMediaView(mediaId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async viewsControllerCreatePlaylistView(playlistId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.viewsControllerCreatePlaylistView(playlistId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ViewsApi - factory interface
 * @export
 */
export const ViewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ViewsApiFp(configuration);
  return {
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsControllerCreateMediaView(mediaId: string, options?: any): AxiosPromise<ViewItem> {
      return localVarFp.viewsControllerCreateMediaView(mediaId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewsControllerCreatePlaylistView(playlistId: string, options?: any): AxiosPromise<ViewItem> {
      return localVarFp.viewsControllerCreatePlaylistView(playlistId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for viewsControllerCreateMediaView operation in ViewsApi.
 * @export
 * @interface ViewsApiViewsControllerCreateMediaViewRequest
 */
export interface ViewsApiViewsControllerCreateMediaViewRequest {
  /**
   *
   * @type {string}
   * @memberof ViewsApiViewsControllerCreateMediaView
   */
  readonly mediaId: string;
}

/**
 * Request parameters for viewsControllerCreatePlaylistView operation in ViewsApi.
 * @export
 * @interface ViewsApiViewsControllerCreatePlaylistViewRequest
 */
export interface ViewsApiViewsControllerCreatePlaylistViewRequest {
  /**
   *
   * @type {string}
   * @memberof ViewsApiViewsControllerCreatePlaylistView
   */
  readonly playlistId: string;
}

/**
 * ViewsApi - object-oriented interface
 * @export
 * @class ViewsApi
 * @extends {BaseAPI}
 */
export class ViewsApi extends BaseAPI {
  /**
   *
   * @param {ViewsApiViewsControllerCreateMediaViewRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ViewsApi
   */
  public viewsControllerCreateMediaView(requestParameters: ViewsApiViewsControllerCreateMediaViewRequest, options?: any) {
    return ViewsApiFp(this.configuration)
      .viewsControllerCreateMediaView(requestParameters.mediaId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ViewsApiViewsControllerCreatePlaylistViewRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ViewsApi
   */
  public viewsControllerCreatePlaylistView(requestParameters: ViewsApiViewsControllerCreatePlaylistViewRequest, options?: any) {
    return ViewsApiFp(this.configuration)
      .viewsControllerCreatePlaylistView(requestParameters.playlistId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
