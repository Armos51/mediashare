/* tslint:disable */
/* eslint-disable */
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePlaylistDto } from '../models';
// @ts-ignore
import { CreatePlaylistResponseDto } from '../models';
// @ts-ignore
import { PlaylistItem } from '../models';
// @ts-ignore
import { PlaylistResponseDto } from '../models';
// @ts-ignore
import { ShareItem } from '../models';
// @ts-ignore
import { UpdatePlaylistDto } from '../models';
/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
export const PlaylistsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreatePlaylistDto} createPlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerCreate: async (createPlaylistDto: CreatePlaylistDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'createPlaylistDto' is not null or undefined
      assertParamExists('playlistControllerCreate', 'createPlaylistDto', createPlaylistDto);
      const localVarPath = `/api/playlists`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createPlaylistDto, localVarRequestOptions, configuration);

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/playlists`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindOne: async (playlistId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerFindOne', 'playlistId', playlistId);
      const localVarPath = `/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerGetCategories: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/playlists/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerRemove: async (playlistId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerRemove', 'playlistId', playlistId);
      const localVarPath = `/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerShare: async (playlistId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerShare', 'playlistId', playlistId);
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('playlistControllerShare', 'userId', userId);
      const localVarPath = `/api/playlists/{playlistId}`
        .replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {UpdatePlaylistDto} updatePlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerUpdate: async (playlistId: string, updatePlaylistDto: UpdatePlaylistDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerUpdate', 'playlistId', playlistId);
      // verify required parameter 'updatePlaylistDto' is not null or undefined
      assertParamExists('playlistControllerUpdate', 'updatePlaylistDto', updatePlaylistDto);
      const localVarPath = `/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query); // TODO: Undo this!
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updatePlaylistDto, localVarRequestOptions, configuration);

      return {
        url: localVarPath,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlaylistsApi - functional programming interface
 * @export
 */
export const PlaylistsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlaylistsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreatePlaylistDto} createPlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerCreate(
      createPlaylistDto: CreatePlaylistDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePlaylistResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerCreate(createPlaylistDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlaylistItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerFindOne(
      playlistId: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerFindOne(playlistId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerGetCategories(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerGetCategories(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerRemove(playlistId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerRemove(playlistId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerShare(
      playlistId: string,
      userId: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShareItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerShare(playlistId, userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {UpdatePlaylistDto} updatePlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerUpdate(
      playlistId: string,
      updatePlaylistDto: UpdatePlaylistDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerUpdate(playlistId, updatePlaylistDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PlaylistsApi - factory interface
 * @export
 */
export const PlaylistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PlaylistsApiFp(configuration);
  return {
    /**
     *
     * @param {CreatePlaylistDto} createPlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerCreate(createPlaylistDto: CreatePlaylistDto, options?: any): AxiosPromise<CreatePlaylistResponseDto> {
      return localVarFp.playlistControllerCreate(createPlaylistDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindAll(options?: any): AxiosPromise<Array<PlaylistItem>> {
      return localVarFp.playlistControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindOne(playlistId: string, options?: any): AxiosPromise<PlaylistResponseDto> {
      return localVarFp.playlistControllerFindOne(playlistId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerGetCategories(options?: any): AxiosPromise<void> {
      return localVarFp.playlistControllerGetCategories(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerRemove(playlistId: string, options?: any): AxiosPromise<void> {
      return localVarFp.playlistControllerRemove(playlistId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerShare(playlistId: string, userId: string, options?: any): AxiosPromise<Array<ShareItem>> {
      return localVarFp.playlistControllerShare(playlistId, userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {UpdatePlaylistDto} updatePlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerUpdate(playlistId: string, updatePlaylistDto: UpdatePlaylistDto, options?: any): AxiosPromise<void> {
      return localVarFp.playlistControllerUpdate(playlistId, updatePlaylistDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for playlistControllerCreate operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerCreateRequest
 */
export interface PlaylistsApiPlaylistControllerCreateRequest {
  /**
   *
   * @type {CreatePlaylistDto}
   * @memberof PlaylistsApiPlaylistControllerCreate
   */
  readonly createPlaylistDto: CreatePlaylistDto;
}

/**
 * Request parameters for playlistControllerFindOne operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerFindOneRequest
 */
export interface PlaylistsApiPlaylistControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerFindOne
   */
  readonly playlistId: string;
}

/**
 * Request parameters for playlistControllerRemove operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerRemoveRequest
 */
export interface PlaylistsApiPlaylistControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerRemove
   */
  readonly playlistId: string;
}

/**
 * Request parameters for playlistControllerShare operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerShareRequest
 */
export interface PlaylistsApiPlaylistControllerShareRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerShare
   */
  readonly playlistId: string;

  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerShare
   */
  readonly userId: string;
}

/**
 * Request parameters for playlistControllerUpdate operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerUpdateRequest
 */
export interface PlaylistsApiPlaylistControllerUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerUpdate
   */
  readonly playlistId: string;

  /**
   *
   * @type {UpdatePlaylistDto}
   * @memberof PlaylistsApiPlaylistControllerUpdate
   */
  readonly updatePlaylistDto: UpdatePlaylistDto;
}

/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
export class PlaylistsApi extends BaseAPI {
  /**
   *
   * @param {PlaylistsApiPlaylistControllerCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerCreate(requestParameters: PlaylistsApiPlaylistControllerCreateRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerCreate(requestParameters.createPlaylistDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerFindAll(options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerFindOne(requestParameters: PlaylistsApiPlaylistControllerFindOneRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerFindOne(requestParameters.playlistId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerGetCategories(options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerGetCategories(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerRemove(requestParameters: PlaylistsApiPlaylistControllerRemoveRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerRemove(requestParameters.playlistId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerShareRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerShare(requestParameters: PlaylistsApiPlaylistControllerShareRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerShare(requestParameters.playlistId, requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerUpdate(requestParameters: PlaylistsApiPlaylistControllerUpdateRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerUpdate(requestParameters.playlistId, requestParameters.updatePlaylistDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
