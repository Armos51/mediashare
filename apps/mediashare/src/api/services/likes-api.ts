/* tslint:disable */
/* eslint-disable */
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Like } from '../models';
/**
 * LikesApi - axios parameter creator
 * @export
 */
export const LikesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    likesControllerCreateMediaView: async (mediaId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('likesControllerCreateMediaView', 'mediaId', mediaId);
      const localVarPath = `/api/likes/mediaItem/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    likesControllerCreatePlaylistView: async (playlistId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('likesControllerCreatePlaylistView', 'playlistId', playlistId);
      const localVarPath = `/api/likes/playlist/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} likeId
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    likesControllerRemove: async (likeId: string, mediaId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'likeId' is not null or undefined
      assertParamExists('likesControllerRemove', 'likeId', likeId);
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('likesControllerRemove', 'mediaId', mediaId);
      const localVarPath = `/api/likes/{likeId}`
        .replace(`{${'likeId'}}`, encodeURIComponent(String(likeId)))
        .replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LikesApi - functional programming interface
 * @export
 */
export const LikesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LikesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async likesControllerCreateMediaView(mediaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Like>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.likesControllerCreateMediaView(mediaId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async likesControllerCreatePlaylistView(playlistId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Like>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.likesControllerCreatePlaylistView(playlistId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} likeId
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async likesControllerRemove(likeId: string, mediaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Like>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.likesControllerRemove(likeId, mediaId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * LikesApi - factory interface
 * @export
 */
export const LikesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LikesApiFp(configuration);
  return {
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    likesControllerCreateMediaView(mediaId: string, options?: any): AxiosPromise<Like> {
      return localVarFp.likesControllerCreateMediaView(mediaId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    likesControllerCreatePlaylistView(playlistId: string, options?: any): AxiosPromise<Like> {
      return localVarFp.likesControllerCreatePlaylistView(playlistId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} likeId
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    likesControllerRemove(likeId: string, mediaId: string, options?: any): AxiosPromise<Like> {
      return localVarFp.likesControllerRemove(likeId, mediaId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for likesControllerCreateMediaView operation in LikesApi.
 * @export
 * @interface LikesApiLikesControllerCreateMediaViewRequest
 */
export interface LikesApiLikesControllerCreateMediaViewRequest {
  /**
   *
   * @type {string}
   * @memberof LikesApiLikesControllerCreateMediaView
   */
  readonly mediaId: string;
}

/**
 * Request parameters for likesControllerCreatePlaylistView operation in LikesApi.
 * @export
 * @interface LikesApiLikesControllerCreatePlaylistViewRequest
 */
export interface LikesApiLikesControllerCreatePlaylistViewRequest {
  /**
   *
   * @type {string}
   * @memberof LikesApiLikesControllerCreatePlaylistView
   */
  readonly playlistId: string;
}

/**
 * Request parameters for likesControllerRemove operation in LikesApi.
 * @export
 * @interface LikesApiLikesControllerRemoveRequest
 */
export interface LikesApiLikesControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof LikesApiLikesControllerRemove
   */
  readonly likeId: string;

  /**
   *
   * @type {string}
   * @memberof LikesApiLikesControllerRemove
   */
  readonly mediaId: string;
}

/**
 * LikesApi - object-oriented interface
 * @export
 * @class LikesApi
 * @extends {BaseAPI}
 */
export class LikesApi extends BaseAPI {
  /**
   *
   * @param {LikesApiLikesControllerCreateMediaViewRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LikesApi
   */
  public likesControllerCreateMediaView(requestParameters: LikesApiLikesControllerCreateMediaViewRequest, options?: any) {
    return LikesApiFp(this.configuration)
      .likesControllerCreateMediaView(requestParameters.mediaId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LikesApiLikesControllerCreatePlaylistViewRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LikesApi
   */
  public likesControllerCreatePlaylistView(requestParameters: LikesApiLikesControllerCreatePlaylistViewRequest, options?: any) {
    return LikesApiFp(this.configuration)
      .likesControllerCreatePlaylistView(requestParameters.playlistId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LikesApiLikesControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LikesApi
   */
  public likesControllerRemove(requestParameters: LikesApiLikesControllerRemoveRequest, options?: any) {
    return LikesApiFp(this.configuration)
      .likesControllerRemove(requestParameters.likeId, requestParameters.mediaId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
