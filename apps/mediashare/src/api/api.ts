/* tslint:disable */
/* eslint-disable */
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface CreateMediaItemDto
 */
export interface CreateMediaItemDto {
  /**
   *
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  createdAt: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  createdBy: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  userId: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateMediaItemDto
   */
  isPlayable: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  summary: string;
  /**
   *
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateMediaItemDto
   */
  category: CreateMediaItemDtoCategoryEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum CreateMediaItemDtoCategoryEnum {
  Strength = 'strength',
  Flexibility = 'flexibility',
  Endurance = 'endurance',
}

/**
 *
 * @export
 * @interface CreatePlaylistDto
 */
export interface CreatePlaylistDto {
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof CreatePlaylistDto
   */
  createdBy: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof CreatePlaylistDto
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof CreatePlaylistDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreatePlaylistDto
   */
  category: CreatePlaylistDtoCategoryEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof CreatePlaylistDto
   */
  mediaIds: Array<string>;
}

/**
 * @export
 * @enum {string}
 */
export enum CreatePlaylistDtoCategoryEnum {
  Rehab = 'rehab',
  Builder = 'builder',
  Warmup = 'warmup',
}

/**
 *
 * @export
 * @interface CreatePlaylistResponseDto
 */
export interface CreatePlaylistResponseDto {
  /**
   *
   * @type {Playlist}
   * @memberof CreatePlaylistResponseDto
   */
  playlist: Playlist;
  /**
   *
   * @type {Array<string>}
   * @memberof CreatePlaylistResponseDto
   */
  playlistItems: Array<string>;
}
/**
 *
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
  /**
   *
   * @type {string}
   * @memberof LoginDto
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof LoginDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof LoginResponseDto
   */
  createdBy: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  accessToken: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  _id: string;
  /**
   *
   * @type {Array<MediaItem>}
   * @memberof LoginResponseDto
   */
  sharedMediaItems: Array<MediaItem>;
  /**
   *
   * @type {Array<Playlist>}
   * @memberof LoginResponseDto
   */
  sharedPlaylists: Array<Playlist>;
  /**
   *
   * @type {Array<MediaItem>}
   * @memberof LoginResponseDto
   */
  mediaItems: Array<MediaItem>;
  /**
   *
   * @type {Array<Playlist>}
   * @memberof LoginResponseDto
   */
  playlists: Array<Playlist>;
}
/**
 *
 * @export
 * @interface MediaItem
 */
export interface MediaItem {
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof MediaItem
   */
  createdBy: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof MediaItem
   */
  userId: string;
  /**
   *
   * @type {boolean}
   * @memberof MediaItem
   */
  isPlayable: boolean;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  summary: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  displayFileName: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  thumbnail?: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  uri: string;
  /**
   *
   * @type {string}
   * @memberof MediaItem
   */
  category: MediaItemCategoryEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MediaItemCategoryEnum {
  Strength = 'strength',
  Flexibility = 'flexibility',
  Endurance = 'endurance',
}

/**
 *
 * @export
 * @interface MediaItemDto
 */
export interface MediaItemDto {
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  createdAt: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof MediaItemDto
   */
  createdBy: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof MediaItemDto
   */
  userId: string;
  /**
   *
   * @type {boolean}
   * @memberof MediaItemDto
   */
  isPlayable: boolean;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  summary: string;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  category: MediaItemDtoCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  displayFileName: string;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  thumbnail: string;
  /**
   *
   * @type {string}
   * @memberof MediaItemDto
   */
  uri: string;
}

/**
 * @export
 * @enum {string}
 */
export enum MediaItemDtoCategoryEnum {
  Strength = 'strength',
  Flexibility = 'flexibility',
  Endurance = 'endurance',
}

/**
 *
 * @export
 * @interface Playlist
 */
export interface Playlist {
  /**
   *
   * @type {string}
   * @memberof Playlist
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof Playlist
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof Playlist
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof Playlist
   */
  createdBy: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof Playlist
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof Playlist
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Playlist
   */
  category: PlaylistCategoryEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PlaylistCategoryEnum {
  Rehab = 'rehab',
  Builder = 'builder',
  Warmup = 'warmup',
}

/**
 *
 * @export
 * @interface PlaylistItem
 */
export interface PlaylistItem {
  /**
   *
   * @type {string}
   * @memberof PlaylistItem
   */
  mediaId: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItem
   */
  userId: string;
}
/**
 *
 * @export
 * @interface PlaylistItemResponseDto
 */
export interface PlaylistItemResponseDto {
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  userId: string;
  /**
   *
   * @type {boolean}
   * @memberof PlaylistItemResponseDto
   */
  isPlayable: boolean;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  summary: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  displayFileName: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  thumbnail?: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  uri: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  category: PlaylistItemResponseDtoCategoryEnum;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  mediaId: string;
  /**
   *
   * @type {string}
   * @memberof PlaylistItemResponseDto
   */
  playlistItemId: string;
}

/**
 * @export
 * @enum {string}
 */
export enum PlaylistItemResponseDtoCategoryEnum {
  Strength = 'strength',
  Flexibility = 'flexibility',
  Endurance = 'endurance',
}

/**
 *
 * @export
 * @interface PlaylistResponseDto
 */
export interface PlaylistResponseDto {
  /**
   *
   * @type {string}
   * @memberof PlaylistResponseDto
   */
  _id: string;
  /**
   * Playlist response DTO
   * @type {PlaylistItemResponseDto}
   * @memberof PlaylistResponseDto
   */
  playlist_media_items_for_user: PlaylistItemResponseDto;
}
/**
 *
 * @export
 * @interface ShareItem
 */
export interface ShareItem {
  /**
   *
   * @type {string}
   * @memberof ShareItem
   */
  _id: string;
  /**
   *
   * @type {string}
   * @memberof ShareItem
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof ShareItem
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof ShareItem
   */
  createdBy: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof ShareItem
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof ShareItem
   */
  playlistId?: string;
  /**
   *
   * @type {string}
   * @memberof ShareItem
   */
  mediaId?: string;
  /**
   *
   * @type {string}
   * @memberof ShareItem
   */
  title: string;
}
/**
 *
 * @export
 * @interface TokenDto
 */
export interface TokenDto {
  /**
   *
   * @type {string}
   * @memberof TokenDto
   */
  token: string;
}
/**
 *
 * @export
 * @interface UpdateMediaItemDto
 */
export interface UpdateMediaItemDto {
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  _id?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  createdBy?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  userId?: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateMediaItemDto
   */
  isPlayable?: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  summary?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  title?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  displayFileName?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  thumbnail?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  uri?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMediaItemDto
   */
  category?: UpdateMediaItemDtoCategoryEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum UpdateMediaItemDtoCategoryEnum {
  Strength = 'strength',
  Flexibility = 'flexibility',
  Endurance = 'endurance',
}

/**
 *
 * @export
 * @interface UpdatePlaylistDto
 */
export interface UpdatePlaylistDto {
  /**
   *
   * @type {string}
   * @memberof UpdatePlaylistDto
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePlaylistDto
   */
  category: UpdatePlaylistDtoCategoryEnum;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdatePlaylistDto
   */
  items?: Array<string>;
}

/**
 * @export
 * @enum {string}
 */
export enum UpdatePlaylistDtoCategoryEnum {
  Rehab = 'rehab',
  Builder = 'builder',
  Warmup = 'warmup',
}

/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  _id?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof UpdateUserDto
   */
  createdBy?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof UpdateUserDto
   */
  userId?: string;
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  updatedDate?: string;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof UserDto
   */
  createdBy: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  authId: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  roles: UserDtoRolesEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum UserDtoRolesEnum {
  Guest = 'guest',
  User = 'user',
  Admin = 'admin',
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerIsOnline: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/online-status`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerIsOnline(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerIsOnline(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerIsOnline(options?: any): AxiosPromise<void> {
      return localVarFp.appControllerIsOnline(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public appControllerIsOnline(options?: any) {
    return DefaultApiFp(this.configuration)
      .appControllerIsOnline(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MediaItemsApi - axios parameter creator
 * @export
 */
export const MediaItemsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateMediaItemDto} createMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerCreate: async (createMediaItemDto: CreateMediaItemDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'createMediaItemDto' is not null or undefined
      assertParamExists('mediaItemControllerCreate', 'createMediaItemDto', createMediaItemDto);
      const localVarPath = `/api/media-items`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createMediaItemDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/media-items`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerFindOne: async (mediaId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('mediaItemControllerFindOne', 'mediaId', mediaId);
      const localVarPath = `/api/media-items/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerGetCategories: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/media-items/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerRemove: async (mediaId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('mediaItemControllerRemove', 'mediaId', mediaId);
      const localVarPath = `/api/media-items/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} mediaId
     * @param {string} userId
     * @param {CreateMediaItemDto} createMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerShare: async (mediaId: string, userId: string, createMediaItemDto: CreateMediaItemDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('mediaItemControllerShare', 'mediaId', mediaId);
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('mediaItemControllerShare', 'userId', userId);
      // verify required parameter 'createMediaItemDto' is not null or undefined
      assertParamExists('mediaItemControllerShare', 'createMediaItemDto', createMediaItemDto);
      const localVarPath = `/api/media-items/{mediaId}/share/{userId}`
        .replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createMediaItemDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} mediaId
     * @param {UpdateMediaItemDto} updateMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerUpdate: async (mediaId: string, updateMediaItemDto: UpdateMediaItemDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'mediaId' is not null or undefined
      assertParamExists('mediaItemControllerUpdate', 'mediaId', mediaId);
      // verify required parameter 'updateMediaItemDto' is not null or undefined
      assertParamExists('mediaItemControllerUpdate', 'updateMediaItemDto', updateMediaItemDto);
      const localVarPath = `/api/media-items/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(mediaId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateMediaItemDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MediaItemsApi - functional programming interface
 * @export
 */
export const MediaItemsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MediaItemsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateMediaItemDto} createMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerCreate(
      createMediaItemDto: CreateMediaItemDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerCreate(createMediaItemDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerFindOne(mediaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerFindOne(mediaId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerGetCategories(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerGetCategories(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerRemove(mediaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerRemove(mediaId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} mediaId
     * @param {string} userId
     * @param {CreateMediaItemDto} createMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerShare(
      mediaId: string,
      userId: string,
      createMediaItemDto: CreateMediaItemDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerShare(mediaId, userId, createMediaItemDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} mediaId
     * @param {UpdateMediaItemDto} updateMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mediaItemControllerUpdate(
      mediaId: string,
      updateMediaItemDto: UpdateMediaItemDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.mediaItemControllerUpdate(mediaId, updateMediaItemDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MediaItemsApi - factory interface
 * @export
 */
export const MediaItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = MediaItemsApiFp(configuration);
  return {
    /**
     *
     * @param {CreateMediaItemDto} createMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerCreate(createMediaItemDto: CreateMediaItemDto, options?: any): AxiosPromise<MediaItem> {
      return localVarFp.mediaItemControllerCreate(createMediaItemDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerFindAll(options?: any): AxiosPromise<Array<MediaItem>> {
      return localVarFp.mediaItemControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerFindOne(mediaId: string, options?: any): AxiosPromise<MediaItem> {
      return localVarFp.mediaItemControllerFindOne(mediaId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerGetCategories(options?: any): AxiosPromise<void> {
      return localVarFp.mediaItemControllerGetCategories(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} mediaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerRemove(mediaId: string, options?: any): AxiosPromise<void> {
      return localVarFp.mediaItemControllerRemove(mediaId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} mediaId
     * @param {string} userId
     * @param {CreateMediaItemDto} createMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerShare(mediaId: string, userId: string, createMediaItemDto: CreateMediaItemDto, options?: any): AxiosPromise<ShareItem> {
      return localVarFp.mediaItemControllerShare(mediaId, userId, createMediaItemDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} mediaId
     * @param {UpdateMediaItemDto} updateMediaItemDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mediaItemControllerUpdate(mediaId: string, updateMediaItemDto: UpdateMediaItemDto, options?: any): AxiosPromise<MediaItem> {
      return localVarFp.mediaItemControllerUpdate(mediaId, updateMediaItemDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for mediaItemControllerCreate operation in MediaItemsApi.
 * @export
 * @interface MediaItemsApiMediaItemControllerCreateRequest
 */
export interface MediaItemsApiMediaItemControllerCreateRequest {
  /**
   *
   * @type {CreateMediaItemDto}
   * @memberof MediaItemsApiMediaItemControllerCreate
   */
  readonly createMediaItemDto: CreateMediaItemDto;
}

/**
 * Request parameters for mediaItemControllerFindOne operation in MediaItemsApi.
 * @export
 * @interface MediaItemsApiMediaItemControllerFindOneRequest
 */
export interface MediaItemsApiMediaItemControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof MediaItemsApiMediaItemControllerFindOne
   */
  readonly mediaId: string;
}

/**
 * Request parameters for mediaItemControllerRemove operation in MediaItemsApi.
 * @export
 * @interface MediaItemsApiMediaItemControllerRemoveRequest
 */
export interface MediaItemsApiMediaItemControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof MediaItemsApiMediaItemControllerRemove
   */
  readonly mediaId: string;
}

/**
 * Request parameters for mediaItemControllerShare operation in MediaItemsApi.
 * @export
 * @interface MediaItemsApiMediaItemControllerShareRequest
 */
export interface MediaItemsApiMediaItemControllerShareRequest {
  /**
   *
   * @type {string}
   * @memberof MediaItemsApiMediaItemControllerShare
   */
  readonly mediaId: string;

  /**
   *
   * @type {string}
   * @memberof MediaItemsApiMediaItemControllerShare
   */
  readonly userId: string;

  /**
   *
   * @type {CreateMediaItemDto}
   * @memberof MediaItemsApiMediaItemControllerShare
   */
  readonly createMediaItemDto: CreateMediaItemDto;
}

/**
 * Request parameters for mediaItemControllerUpdate operation in MediaItemsApi.
 * @export
 * @interface MediaItemsApiMediaItemControllerUpdateRequest
 */
export interface MediaItemsApiMediaItemControllerUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof MediaItemsApiMediaItemControllerUpdate
   */
  readonly mediaId: string;

  /**
   *
   * @type {UpdateMediaItemDto}
   * @memberof MediaItemsApiMediaItemControllerUpdate
   */
  readonly updateMediaItemDto: UpdateMediaItemDto;
}

/**
 * MediaItemsApi - object-oriented interface
 * @export
 * @class MediaItemsApi
 * @extends {BaseAPI}
 */
export class MediaItemsApi extends BaseAPI {
  /**
   *
   * @param {MediaItemsApiMediaItemControllerCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerCreate(requestParameters: MediaItemsApiMediaItemControllerCreateRequest, options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerCreate(requestParameters.createMediaItemDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerFindAll(options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MediaItemsApiMediaItemControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerFindOne(requestParameters: MediaItemsApiMediaItemControllerFindOneRequest, options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerFindOne(requestParameters.mediaId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerGetCategories(options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerGetCategories(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MediaItemsApiMediaItemControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerRemove(requestParameters: MediaItemsApiMediaItemControllerRemoveRequest, options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerRemove(requestParameters.mediaId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MediaItemsApiMediaItemControllerShareRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerShare(requestParameters: MediaItemsApiMediaItemControllerShareRequest, options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerShare(requestParameters.mediaId, requestParameters.userId, requestParameters.createMediaItemDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {MediaItemsApiMediaItemControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MediaItemsApi
   */
  public mediaItemControllerUpdate(requestParameters: MediaItemsApiMediaItemControllerUpdateRequest, options?: any) {
    return MediaItemsApiFp(this.configuration)
      .mediaItemControllerUpdate(requestParameters.mediaId, requestParameters.updateMediaItemDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
export const PlaylistsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreatePlaylistDto} createPlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerCreate: async (createPlaylistDto: CreatePlaylistDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'createPlaylistDto' is not null or undefined
      assertParamExists('playlistControllerCreate', 'createPlaylistDto', createPlaylistDto);
      const localVarPath = `/api/playlists`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createPlaylistDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/playlists`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      // const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      // const localVarHeaderParameter = {} as any;
      // const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      // await setBearerAuthToObject(localVarHeaderParameter, configuration);

      // setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      // let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      // localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: '/playlists', // toPathString(localVarUrlObj),
        options: {} // localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindOne: async (playlistId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerFindOne', 'playlistId', playlistId);
      const localVarPath = `/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerGetCategories: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/playlists/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerRemove: async (playlistId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerRemove', 'playlistId', playlistId);
      const localVarPath = `/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerShare: async (playlistId: string, userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerShare', 'playlistId', playlistId);
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('playlistControllerShare', 'userId', userId);
      const localVarPath = `/api/playlists/{playlistId}`
        .replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} playlistId
     * @param {UpdatePlaylistDto} updatePlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerUpdate: async (playlistId: string, updatePlaylistDto: UpdatePlaylistDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'playlistId' is not null or undefined
      assertParamExists('playlistControllerUpdate', 'playlistId', playlistId);
      // verify required parameter 'updatePlaylistDto' is not null or undefined
      assertParamExists('playlistControllerUpdate', 'updatePlaylistDto', updatePlaylistDto);
      const localVarPath = `/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(playlistId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updatePlaylistDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PlaylistsApi - functional programming interface
 * @export
 */
export const PlaylistsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PlaylistsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreatePlaylistDto} createPlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerCreate(
      createPlaylistDto: CreatePlaylistDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePlaylistResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerCreate(createPlaylistDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlaylistItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerFindOne(
      playlistId: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerFindOne(playlistId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerGetCategories(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerGetCategories(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerRemove(playlistId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerRemove(playlistId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerShare(
      playlistId: string,
      userId: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShareItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerShare(playlistId, userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} playlistId
     * @param {UpdatePlaylistDto} updatePlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async playlistControllerUpdate(
      playlistId: string,
      updatePlaylistDto: UpdatePlaylistDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.playlistControllerUpdate(playlistId, updatePlaylistDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PlaylistsApi - factory interface
 * @export
 */
export const PlaylistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PlaylistsApiFp(configuration);
  return {
    /**
     *
     * @param {CreatePlaylistDto} createPlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerCreate(createPlaylistDto: CreatePlaylistDto, options?: any): AxiosPromise<CreatePlaylistResponseDto> {
      return localVarFp.playlistControllerCreate(createPlaylistDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindAll(options?: any): AxiosPromise<Array<PlaylistItem>> {
      return localVarFp.playlistControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerFindOne(playlistId: string, options?: any): AxiosPromise<PlaylistResponseDto> {
      return localVarFp.playlistControllerFindOne(playlistId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerGetCategories(options?: any): AxiosPromise<void> {
      return localVarFp.playlistControllerGetCategories(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerRemove(playlistId: string, options?: any): AxiosPromise<void> {
      return localVarFp.playlistControllerRemove(playlistId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerShare(playlistId: string, userId: string, options?: any): AxiosPromise<Array<ShareItem>> {
      return localVarFp.playlistControllerShare(playlistId, userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} playlistId
     * @param {UpdatePlaylistDto} updatePlaylistDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    playlistControllerUpdate(playlistId: string, updatePlaylistDto: UpdatePlaylistDto, options?: any): AxiosPromise<void> {
      return localVarFp.playlistControllerUpdate(playlistId, updatePlaylistDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for playlistControllerCreate operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerCreateRequest
 */
export interface PlaylistsApiPlaylistControllerCreateRequest {
  /**
   *
   * @type {CreatePlaylistDto}
   * @memberof PlaylistsApiPlaylistControllerCreate
   */
  readonly createPlaylistDto: CreatePlaylistDto;
}

/**
 * Request parameters for playlistControllerFindOne operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerFindOneRequest
 */
export interface PlaylistsApiPlaylistControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerFindOne
   */
  readonly playlistId: string;
}

/**
 * Request parameters for playlistControllerRemove operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerRemoveRequest
 */
export interface PlaylistsApiPlaylistControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerRemove
   */
  readonly playlistId: string;
}

/**
 * Request parameters for playlistControllerShare operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerShareRequest
 */
export interface PlaylistsApiPlaylistControllerShareRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerShare
   */
  readonly playlistId: string;

  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerShare
   */
  readonly userId: string;
}

/**
 * Request parameters for playlistControllerUpdate operation in PlaylistsApi.
 * @export
 * @interface PlaylistsApiPlaylistControllerUpdateRequest
 */
export interface PlaylistsApiPlaylistControllerUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof PlaylistsApiPlaylistControllerUpdate
   */
  readonly playlistId: string;

  /**
   *
   * @type {UpdatePlaylistDto}
   * @memberof PlaylistsApiPlaylistControllerUpdate
   */
  readonly updatePlaylistDto: UpdatePlaylistDto;
}

/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
export class PlaylistsApi extends BaseAPI {
  /**
   *
   * @param {PlaylistsApiPlaylistControllerCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerCreate(requestParameters: PlaylistsApiPlaylistControllerCreateRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerCreate(requestParameters.createPlaylistDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerFindAll(options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerFindOne(requestParameters: PlaylistsApiPlaylistControllerFindOneRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerFindOne(requestParameters.playlistId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerGetCategories(options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerGetCategories(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerRemove(requestParameters: PlaylistsApiPlaylistControllerRemoveRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerRemove(requestParameters.playlistId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerShareRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerShare(requestParameters: PlaylistsApiPlaylistControllerShareRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerShare(requestParameters.playlistId, requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PlaylistsApiPlaylistControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PlaylistsApi
   */
  public playlistControllerUpdate(requestParameters: PlaylistsApiPlaylistControllerUpdateRequest, options?: any) {
    return PlaylistsApiFp(this.configuration)
      .playlistControllerUpdate(requestParameters.playlistId, requestParameters.updatePlaylistDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ShareItemsApi - axios parameter creator
 * @export
 */
export const ShareItemsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/share-items`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindOne: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('shareItemsControllerFindOne', 'shareId', shareId);
      const localVarPath = `/api/share-items/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerRemove: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('shareItemsControllerRemove', 'shareId', shareId);
      const localVarPath = `/api/share-items/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShareItemsApi - functional programming interface
 * @export
 */
export const ShareItemsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShareItemsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShareItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerFindOne(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerFindOne(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async shareItemsControllerRemove(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareItem>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.shareItemsControllerRemove(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ShareItemsApi - factory interface
 * @export
 */
export const ShareItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ShareItemsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindAll(options?: any): AxiosPromise<Array<ShareItem>> {
      return localVarFp.shareItemsControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerFindOne(shareId: string, options?: any): AxiosPromise<ShareItem> {
      return localVarFp.shareItemsControllerFindOne(shareId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    shareItemsControllerRemove(shareId: string, options?: any): AxiosPromise<ShareItem> {
      return localVarFp.shareItemsControllerRemove(shareId, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for shareItemsControllerFindOne operation in ShareItemsApi.
 * @export
 * @interface ShareItemsApiShareItemsControllerFindOneRequest
 */
export interface ShareItemsApiShareItemsControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof ShareItemsApiShareItemsControllerFindOne
   */
  readonly shareId: string;
}

/**
 * Request parameters for shareItemsControllerRemove operation in ShareItemsApi.
 * @export
 * @interface ShareItemsApiShareItemsControllerRemoveRequest
 */
export interface ShareItemsApiShareItemsControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof ShareItemsApiShareItemsControllerRemove
   */
  readonly shareId: string;
}

/**
 * ShareItemsApi - object-oriented interface
 * @export
 * @class ShareItemsApi
 * @extends {BaseAPI}
 */
export class ShareItemsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerFindAll(options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ShareItemsApiShareItemsControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerFindOne(requestParameters: ShareItemsApiShareItemsControllerFindOneRequest, options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerFindOne(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ShareItemsApiShareItemsControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShareItemsApi
   */
  public shareItemsControllerRemove(requestParameters: ShareItemsApiShareItemsControllerRemoveRequest, options?: any) {
    return ShareItemsApiFp(this.configuration)
      .shareItemsControllerRemove(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} id
     * @param {TokenDto} tokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAuthorize: async (id: string, tokenDto: TokenDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('userControllerAuthorize', 'id', id);
      // verify required parameter 'tokenDto' is not null or undefined
      assertParamExists('userControllerAuthorize', 'tokenDto', tokenDto);
      const localVarPath = `/api/user/authorize`.replace(`{${':id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(tokenDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetMediaItems: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/media-items`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetMyShareItems: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/playlists/shared`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetPlaylists: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/playlists`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetSharedMediaItems: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/media-items/shared`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUser: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogin: async (loginDto: LoginDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'loginDto' is not null or undefined
      assertParamExists('userControllerLogin', 'loginDto', loginDto);
      const localVarPath = `/api/user/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogout: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {TokenDto} tokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerAuthorize(id: string, tokenDto: TokenDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerAuthorize(id, tokenDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetMediaItems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetMediaItems(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetMyShareItems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShareItem>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetMyShareItems(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetPlaylists(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Playlist>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetPlaylists(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetSharedMediaItems(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaItemDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetSharedMediaItems(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerGetUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUser(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerLogin(loginDto: LoginDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerLogin(loginDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async userControllerLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerLogout(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {TokenDto} tokenDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAuthorize(id: string, tokenDto: TokenDto, options?: any): AxiosPromise<void> {
      return localVarFp.userControllerAuthorize(id, tokenDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetMediaItems(options?: any): AxiosPromise<UserDto> {
      return localVarFp.userControllerGetMediaItems(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetMyShareItems(options?: any): AxiosPromise<Array<ShareItem>> {
      return localVarFp.userControllerGetMyShareItems(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetPlaylists(options?: any): AxiosPromise<Playlist> {
      return localVarFp.userControllerGetPlaylists(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetSharedMediaItems(options?: any): AxiosPromise<Array<MediaItemDto>> {
      return localVarFp.userControllerGetSharedMediaItems(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetUser(options?: any): AxiosPromise<UserDto> {
      return localVarFp.userControllerGetUser(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogin(loginDto: LoginDto, options?: any): AxiosPromise<LoginResponseDto> {
      return localVarFp.userControllerLogin(loginDto, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerLogout(options?: any): AxiosPromise<void> {
      return localVarFp.userControllerLogout(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for userControllerAuthorize operation in UserApi.
 * @export
 * @interface UserApiUserControllerAuthorizeRequest
 */
export interface UserApiUserControllerAuthorizeRequest {
  /**
   *
   * @type {string}
   * @memberof UserApiUserControllerAuthorize
   */
  readonly id: string;

  /**
   *
   * @type {TokenDto}
   * @memberof UserApiUserControllerAuthorize
   */
  readonly tokenDto: TokenDto;
}

/**
 * Request parameters for userControllerLogin operation in UserApi.
 * @export
 * @interface UserApiUserControllerLoginRequest
 */
export interface UserApiUserControllerLoginRequest {
  /**
   *
   * @type {LoginDto}
   * @memberof UserApiUserControllerLogin
   */
  readonly loginDto: LoginDto;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @param {UserApiUserControllerAuthorizeRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerAuthorize(requestParameters: UserApiUserControllerAuthorizeRequest, options?: any) {
    return UserApiFp(this.configuration)
      .userControllerAuthorize(requestParameters.id, requestParameters.tokenDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetMediaItems(options?: any) {
    return UserApiFp(this.configuration)
      .userControllerGetMediaItems(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetMyShareItems(options?: any) {
    return UserApiFp(this.configuration)
      .userControllerGetMyShareItems(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetPlaylists(options?: any) {
    return UserApiFp(this.configuration)
      .userControllerGetPlaylists(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetSharedMediaItems(options?: any) {
    return UserApiFp(this.configuration)
      .userControllerGetSharedMediaItems(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerGetUser(options?: any) {
    return UserApiFp(this.configuration)
      .userControllerGetUser(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserApiUserControllerLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerLogin(requestParameters: UserApiUserControllerLoginRequest, options?: any) {
    return UserApiFp(this.configuration)
      .userControllerLogin(requestParameters.loginDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public userControllerLogout(options?: any) {
    return UserApiFp(this.configuration)
      .userControllerLogout(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerCreate: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne: async (userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerFindOne', 'userId', userId);
      const localVarPath = `/api/users/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetPlaylists: async (userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerGetPlaylists', 'userId', userId);
      const localVarPath = `/api/users/{userId}/playlists`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerReadSharedItem: async (shareId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'shareId' is not null or undefined
      assertParamExists('usersControllerReadSharedItem', 'shareId', shareId);
      const localVarPath = `/api/users/shared-items/{shareId}`.replace(`{${'shareId'}}`, encodeURIComponent(String(shareId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove: async (userId: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerRemove', 'userId', userId);
      const localVarPath = `/api/users/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerSetRoles: async (userId: string, requestBody: Array<string>, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerSetRoles', 'userId', userId);
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('usersControllerSetRoles', 'requestBody', requestBody);
      const localVarPath = `/api/users/{userId}/roles`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate: async (userId: string, updateUserDto: UpdateUserDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('usersControllerUpdate', 'userId', userId);
      // verify required parameter 'updateUserDto' is not null or undefined
      assertParamExists('usersControllerUpdate', 'updateUserDto', updateUserDto);
      const localVarPath = `/api/users/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerCreate(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerFindAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerFindOne(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerGetPlaylists(
      userId: string,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlaylistResponseDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetPlaylists(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerReadSharedItem(shareId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerReadSharedItem(shareId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerRemove(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerSetRoles(
      userId: string,
      requestBody: Array<string>,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerSetRoles(userId, requestBody, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersControllerUpdate(
      userId: string,
      updateUserDto: UpdateUserDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(userId, updateUserDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerCreate(options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerCreate(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindAll(options?: any): AxiosPromise<Array<UserDto>> {
      return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerFindOne(userId: string, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerFindOne(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerGetPlaylists(userId: string, options?: any): AxiosPromise<Array<PlaylistResponseDto>> {
      return localVarFp.usersControllerGetPlaylists(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} shareId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerReadSharedItem(shareId: string, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerReadSharedItem(shareId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerRemove(userId: string, options?: any): AxiosPromise<void> {
      return localVarFp.usersControllerRemove(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerSetRoles(userId: string, requestBody: Array<string>, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerSetRoles(userId, requestBody, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {UpdateUserDto} updateUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersControllerUpdate(userId: string, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp.usersControllerUpdate(userId, updateUserDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for usersControllerFindOne operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerFindOneRequest
 */
export interface UsersApiUsersControllerFindOneRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerFindOne
   */
  readonly userId: string;
}

/**
 * Request parameters for usersControllerGetPlaylists operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerGetPlaylistsRequest
 */
export interface UsersApiUsersControllerGetPlaylistsRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerGetPlaylists
   */
  readonly userId: string;
}

/**
 * Request parameters for usersControllerReadSharedItem operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerReadSharedItemRequest
 */
export interface UsersApiUsersControllerReadSharedItemRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerReadSharedItem
   */
  readonly shareId: string;
}

/**
 * Request parameters for usersControllerRemove operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerRemoveRequest
 */
export interface UsersApiUsersControllerRemoveRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerRemove
   */
  readonly userId: string;
}

/**
 * Request parameters for usersControllerSetRoles operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerSetRolesRequest
 */
export interface UsersApiUsersControllerSetRolesRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerSetRoles
   */
  readonly userId: string;

  /**
   *
   * @type {Array<string>}
   * @memberof UsersApiUsersControllerSetRoles
   */
  readonly requestBody: Array<string>;
}

/**
 * Request parameters for usersControllerUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerUpdateRequest
 */
export interface UsersApiUsersControllerUpdateRequest {
  /**
   *
   * @type {string}
   * @memberof UsersApiUsersControllerUpdate
   */
  readonly userId: string;

  /**
   *
   * @type {UpdateUserDto}
   * @memberof UsersApiUsersControllerUpdate
   */
  readonly updateUserDto: UpdateUserDto;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerCreate(options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerCreate(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerFindAll(options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerFindAll(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerFindOneRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerFindOne(requestParameters: UsersApiUsersControllerFindOneRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerFindOne(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerGetPlaylistsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerGetPlaylists(requestParameters: UsersApiUsersControllerGetPlaylistsRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerGetPlaylists(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerReadSharedItemRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerReadSharedItem(requestParameters: UsersApiUsersControllerReadSharedItemRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerReadSharedItem(requestParameters.shareId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerRemoveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerRemove(requestParameters: UsersApiUsersControllerRemoveRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerRemove(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerSetRolesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerSetRoles(requestParameters: UsersApiUsersControllerSetRolesRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerSetRoles(requestParameters.userId, requestParameters.requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersApiUsersControllerUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersControllerUpdate(requestParameters: UsersApiUsersControllerUpdateRequest, options?: any) {
    return UsersApiFp(this.configuration)
      .usersControllerUpdate(requestParameters.userId, requestParameters.updateUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
