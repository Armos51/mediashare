// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import { MediaItem, MediaItemFromJSON, MediaItemToJSON, Playlist, PlaylistFromJSON, PlaylistToJSON } from './';

/**
 *
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
  /**
   *
   * @type {Date}
   * @memberof LoginResponseDto
   */
  readonly createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof LoginResponseDto
   */
  readonly updatedDate?: Date;
  /**
   * Created by type is generated by the @CreateDto decorator
   * @type {string}
   * @memberof LoginResponseDto
   */
  createdBy: string;
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  accessToken: string;
  /**
   *
   * @type {Date}
   * @memberof LoginResponseDto
   */
  updatedAt: Date;
  /**
   *
   * @type {string}
   * @memberof LoginResponseDto
   */
  _id: string;
  /**
   *
   * @type {Array<MediaItem>}
   * @memberof LoginResponseDto
   */
  sharedMediaItems: Array<MediaItem>;
  /**
   *
   * @type {Array<Playlist>}
   * @memberof LoginResponseDto
   */
  sharedPlaylists: Array<Playlist>;
  /**
   *
   * @type {Array<MediaItem>}
   * @memberof LoginResponseDto
   */
  mediaItems: Array<MediaItem>;
  /**
   *
   * @type {Array<Playlist>}
   * @memberof LoginResponseDto
   */
  playlists: Array<Playlist>;
}

export function LoginResponseDtoFromJSON(json: any): LoginResponseDto {
  return {
    createdAt: new Date(json['createdAt']),
    updatedDate: !exists(json, 'updatedDate') ? undefined : new Date(json['updatedDate']),
    createdBy: json['createdBy'],
    accessToken: json['accessToken'],
    updatedAt: new Date(json['updatedAt']),
    _id: json['_id'],
    sharedMediaItems: (json['sharedMediaItems'] as Array<any>).map(MediaItemFromJSON),
    sharedPlaylists: (json['sharedPlaylists'] as Array<any>).map(PlaylistFromJSON),
    mediaItems: (json['mediaItems'] as Array<any>).map(MediaItemFromJSON),
    playlists: (json['playlists'] as Array<any>).map(PlaylistFromJSON),
  };
}

export function LoginResponseDtoToJSON(value?: LoginResponseDto): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    createdBy: value.createdBy,
    accessToken: value.accessToken,
    updatedAt: value.updatedAt.toISOString(),
    _id: value._id,
    sharedMediaItems: (value.sharedMediaItems as Array<any>).map(MediaItemToJSON),
    sharedPlaylists: (value.sharedPlaylists as Array<any>).map(PlaylistToJSON),
    mediaItems: (value.mediaItems as Array<any>).map(MediaItemToJSON),
    playlists: (value.playlists as Array<any>).map(PlaylistToJSON),
  };
}
