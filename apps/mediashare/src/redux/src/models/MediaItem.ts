// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MediaItem
 */
export interface MediaItem  {
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    _id: string;
    /**
     * 
     * @type {Date}
     * @memberof MediaItem
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaItem
     */
    readonly updatedDate?: Date;
    /**
     * Created by type is generated by the @CreateDto decorator
     * @type {string}
     * @memberof MediaItem
     */
    createdBy: string;
    /**
     * Created by type is generated by the @CreateDto decorator
     * @type {string}
     * @memberof MediaItem
     */
    userId: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediaItem
     */
    isPlayable: boolean;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    summary: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    displayFileName: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    thumbnail?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    uri: string;
    /**
     * 
     * @type {string}
     * @memberof MediaItem
     */
    category: MediaItemCategoryEnum;
}

export function MediaItemFromJSON(json: any): MediaItem {
    return {
        '_id': json['_id'],
        'createdAt': new Date(json['createdAt']),
        'updatedDate': !exists(json, 'updatedDate') ? undefined : new Date(json['updatedDate']),
        'createdBy': json['createdBy'],
        'userId': json['userId'],
        'isPlayable': json['isPlayable'],
        'summary': json['summary'],
        'description': json['description'],
        'title': json['title'],
        'displayFileName': json['displayFileName'],
        'thumbnail': !exists(json, 'thumbnail') ? undefined : json['thumbnail'],
        'uri': json['uri'],
        'category': json['category'],
    };
}

export function MediaItemToJSON(value?: MediaItem): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        '_id': value._id,
        'createdBy': value.createdBy,
        'userId': value.userId,
        'isPlayable': value.isPlayable,
        'summary': value.summary,
        'description': value.description,
        'title': value.title,
        'displayFileName': value.displayFileName,
        'thumbnail': value.thumbnail,
        'uri': value.uri,
        'category': value.category,
    };
}

/**
* @export
* @enum {string}
*/
export enum MediaItemCategoryEnum {
    Strength = 'strength',
    Flexibility = 'flexibility',
    Endurance = 'endurance'
}


