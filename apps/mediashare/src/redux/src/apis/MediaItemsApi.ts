// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
  CreateMediaItemDto,
  CreateMediaItemDtoFromJSON,
  CreateMediaItemDtoToJSON,
  MediaItem,
  MediaItemFromJSON,
  MediaItemToJSON,
  ShareItem,
  ShareItemFromJSON,
  ShareItemToJSON,
  UpdateMediaItemDto,
  UpdateMediaItemDtoFromJSON,
  UpdateMediaItemDtoToJSON,
} from '../models';

export interface MediaItemControllerCreateRequest {
  createMediaItemDto: CreateMediaItemDto;
}

export interface MediaItemControllerFindOneRequest {
  mediaId: string;
}

export interface MediaItemControllerRemoveRequest {
  mediaId: string;
}

export interface MediaItemControllerShareRequest {
  mediaId: string;
  userId: string;
  createMediaItemDto: CreateMediaItemDto;
}

export interface MediaItemControllerUpdateRequest {
  mediaId: string;
  updateMediaItemDto: UpdateMediaItemDto;
}

/**
 */
function mediaItemControllerCreateRaw<T>(
  requestParameters: MediaItemControllerCreateRequest,
  requestConfig: runtime.TypedQueryConfig<T, MediaItem> = {}
): QueryConfig<T> {
  if (requestParameters.createMediaItemDto === null || requestParameters.createMediaItemDto === undefined) {
    throw new runtime.RequiredError(
      'createMediaItemDto',
      'Required parameter requestParameters.createMediaItemDto was null or undefined when calling mediaItemControllerCreate.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters['Content-Type'] = 'application/json';

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body: queryParameters || CreateMediaItemDtoToJSON(requestParameters.createMediaItemDto),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MediaItemFromJSON(body), text);
  }

  return config;
}

/**
 */
export function mediaItemControllerCreate<T>(
  requestParameters: MediaItemControllerCreateRequest,
  requestConfig?: runtime.TypedQueryConfig<T, MediaItem>
): QueryConfig<T> {
  return mediaItemControllerCreateRaw(requestParameters, requestConfig);
}

/**
 */
function mediaItemControllerFindAllRaw<T>(requestConfig: runtime.TypedQueryConfig<T, Array<MediaItem>> = {}): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(MediaItemFromJSON), text);
  }

  return config;
}

/**
 */
export function mediaItemControllerFindAll<T>(requestConfig?: runtime.TypedQueryConfig<T, Array<MediaItem>>): QueryConfig<T> {
  return mediaItemControllerFindAllRaw(requestConfig);
}

/**
 */
function mediaItemControllerFindOneRaw<T>(
  requestParameters: MediaItemControllerFindOneRequest,
  requestConfig: runtime.TypedQueryConfig<T, MediaItem> = {}
): QueryConfig<T> {
  if (requestParameters.mediaId === null || requestParameters.mediaId === undefined) {
    throw new runtime.RequiredError('mediaId', 'Required parameter requestParameters.mediaId was null or undefined when calling mediaItemControllerFindOne.');
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(requestParameters.mediaId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MediaItemFromJSON(body), text);
  }

  return config;
}

/**
 */
export function mediaItemControllerFindOne<T>(
  requestParameters: MediaItemControllerFindOneRequest,
  requestConfig?: runtime.TypedQueryConfig<T, MediaItem>
): QueryConfig<T> {
  return mediaItemControllerFindOneRaw(requestParameters, requestConfig);
}

/**
 */
function mediaItemControllerGetCategoriesRaw<T>(requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items/categories`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 */
export function mediaItemControllerGetCategories<T>(requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
  return mediaItemControllerGetCategoriesRaw(requestConfig);
}

/**
 */
function mediaItemControllerRemoveRaw<T>(
  requestParameters: MediaItemControllerRemoveRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {}
): QueryConfig<T> {
  if (requestParameters.mediaId === null || requestParameters.mediaId === undefined) {
    throw new runtime.RequiredError('mediaId', 'Required parameter requestParameters.mediaId was null or undefined when calling mediaItemControllerRemove.');
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(requestParameters.mediaId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 */
export function mediaItemControllerRemove<T>(
  requestParameters: MediaItemControllerRemoveRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>
): QueryConfig<T> {
  return mediaItemControllerRemoveRaw(requestParameters, requestConfig);
}

/**
 */
function mediaItemControllerShareRaw<T>(
  requestParameters: MediaItemControllerShareRequest,
  requestConfig: runtime.TypedQueryConfig<T, ShareItem> = {}
): QueryConfig<T> {
  if (requestParameters.mediaId === null || requestParameters.mediaId === undefined) {
    throw new runtime.RequiredError('mediaId', 'Required parameter requestParameters.mediaId was null or undefined when calling mediaItemControllerShare.');
  }

  if (requestParameters.userId === null || requestParameters.userId === undefined) {
    throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling mediaItemControllerShare.');
  }

  if (requestParameters.createMediaItemDto === null || requestParameters.createMediaItemDto === undefined) {
    throw new runtime.RequiredError(
      'createMediaItemDto',
      'Required parameter requestParameters.createMediaItemDto was null or undefined when calling mediaItemControllerShare.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters['Content-Type'] = 'application/json';

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items/{mediaId}/share/{userId}`
      .replace(`{${'mediaId'}}`, encodeURIComponent(String(requestParameters.mediaId)))
      .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body: queryParameters || CreateMediaItemDtoToJSON(requestParameters.createMediaItemDto),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ShareItemFromJSON(body), text);
  }

  return config;
}

/**
 */
export function mediaItemControllerShare<T>(
  requestParameters: MediaItemControllerShareRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ShareItem>
): QueryConfig<T> {
  return mediaItemControllerShareRaw(requestParameters, requestConfig);
}

/**
 */
function mediaItemControllerUpdateRaw<T>(
  requestParameters: MediaItemControllerUpdateRequest,
  requestConfig: runtime.TypedQueryConfig<T, MediaItem> = {}
): QueryConfig<T> {
  if (requestParameters.mediaId === null || requestParameters.mediaId === undefined) {
    throw new runtime.RequiredError('mediaId', 'Required parameter requestParameters.mediaId was null or undefined when calling mediaItemControllerUpdate.');
  }

  if (requestParameters.updateMediaItemDto === null || requestParameters.updateMediaItemDto === undefined) {
    throw new runtime.RequiredError(
      'updateMediaItemDto',
      'Required parameter requestParameters.updateMediaItemDto was null or undefined when calling mediaItemControllerUpdate.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters['Content-Type'] = 'application/json';

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/media-items/{mediaId}`.replace(`{${'mediaId'}}`, encodeURIComponent(String(requestParameters.mediaId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body: queryParameters || UpdateMediaItemDtoToJSON(requestParameters.updateMediaItemDto),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MediaItemFromJSON(body), text);
  }

  return config;
}

/**
 */
export function mediaItemControllerUpdate<T>(
  requestParameters: MediaItemControllerUpdateRequest,
  requestConfig?: runtime.TypedQueryConfig<T, MediaItem>
): QueryConfig<T> {
  return mediaItemControllerUpdateRaw(requestParameters, requestConfig);
}
