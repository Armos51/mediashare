// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
  CreatePlaylistDto,
  CreatePlaylistDtoFromJSON,
  CreatePlaylistDtoToJSON,
  CreatePlaylistResponseDto,
  CreatePlaylistResponseDtoFromJSON,
  CreatePlaylistResponseDtoToJSON,
  PlaylistResponseDto,
  PlaylistResponseDtoFromJSON,
  PlaylistResponseDtoToJSON,
  ShareItem,
  ShareItemFromJSON,
  ShareItemToJSON,
  UpdatePlaylistDto,
  UpdatePlaylistDtoFromJSON,
  UpdatePlaylistDtoToJSON,
} from '../models';

export interface PlaylistControllerCreateRequest {
  createPlaylistDto: CreatePlaylistDto;
}

export interface PlaylistControllerFindOneRequest {
  playlistId: string;
}

export interface PlaylistControllerRemoveRequest {
  playlistId: string;
}

export interface PlaylistControllerShareRequest {
  playlistId: string;
  userId: string;
}

export interface PlaylistControllerUpdateRequest {
  playlistId: string;
  updatePlaylistDto: UpdatePlaylistDto;
}

/**
 */
function playlistControllerCreateRaw<T>(
  requestParameters: PlaylistControllerCreateRequest,
  requestConfig: runtime.TypedQueryConfig<T, CreatePlaylistResponseDto> = {}
): QueryConfig<T> {
  if (requestParameters.createPlaylistDto === null || requestParameters.createPlaylistDto === undefined) {
    throw new runtime.RequiredError(
      'createPlaylistDto',
      'Required parameter requestParameters.createPlaylistDto was null or undefined when calling playlistControllerCreate.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters['Content-Type'] = 'application/json';

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/playlists`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body: queryParameters || CreatePlaylistDtoToJSON(requestParameters.createPlaylistDto),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CreatePlaylistResponseDtoFromJSON(body), text);
  }

  return config;
}

/**
 */
export function playlistControllerCreate<T>(
  requestParameters: PlaylistControllerCreateRequest,
  requestConfig?: runtime.TypedQueryConfig<T, CreatePlaylistResponseDto>
): QueryConfig<T> {
  return playlistControllerCreateRaw(requestParameters, requestConfig);
}

/**
 */
function playlistControllerFindOneRaw<T>(
  requestParameters: PlaylistControllerFindOneRequest,
  requestConfig: runtime.TypedQueryConfig<T, PlaylistResponseDto> = {}
): QueryConfig<T> {
  if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
    throw new runtime.RequiredError(
      'playlistId',
      'Required parameter requestParameters.playlistId was null or undefined when calling playlistControllerFindOne.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/playlists`.replace(`{${'playlistId'}}`, encodeURIComponent(String(requestParameters.playlistId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PlaylistResponseDtoFromJSON(body), text);
  }

  return config;
}

/**
 */
export function playlistControllerFindOne<T>(
  requestParameters: PlaylistControllerFindOneRequest,
  requestConfig?: runtime.TypedQueryConfig<T, PlaylistResponseDto>
): QueryConfig<T> {
  return playlistControllerFindOneRaw(requestParameters, requestConfig);
}

/**
 */
function playlistControllerGetCategoriesRaw<T>(requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/playlists/categories`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 */
export function playlistControllerGetCategories<T>(requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
  return playlistControllerGetCategoriesRaw(requestConfig);
}

/**
 */
function playlistControllerRemoveRaw<T>(
  requestParameters: PlaylistControllerRemoveRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {}
): QueryConfig<T> {
  if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
    throw new runtime.RequiredError(
      'playlistId',
      'Required parameter requestParameters.playlistId was null or undefined when calling playlistControllerRemove.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(requestParameters.playlistId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 */
export function playlistControllerRemove<T>(
  requestParameters: PlaylistControllerRemoveRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>
): QueryConfig<T> {
  return playlistControllerRemoveRaw(requestParameters, requestConfig);
}

/**
 */
function playlistControllerShareRaw<T>(
  requestParameters: PlaylistControllerShareRequest,
  requestConfig: runtime.TypedQueryConfig<T, Array<ShareItem>> = {}
): QueryConfig<T> {
  if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
    throw new runtime.RequiredError(
      'playlistId',
      'Required parameter requestParameters.playlistId was null or undefined when calling playlistControllerShare.'
    );
  }

  if (requestParameters.userId === null || requestParameters.userId === undefined) {
    throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling playlistControllerShare.');
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/playlists/{playlistId}`
      .replace(`{${'playlistId'}}`, encodeURIComponent(String(requestParameters.playlistId)))
      .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'POST',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShareItemFromJSON), text);
  }

  return config;
}

/**
 */
export function playlistControllerShare<T>(
  requestParameters: PlaylistControllerShareRequest,
  requestConfig?: runtime.TypedQueryConfig<T, Array<ShareItem>>
): QueryConfig<T> {
  return playlistControllerShareRaw(requestParameters, requestConfig);
}

/**
 */
function playlistControllerUpdateRaw<T>(
  requestParameters: PlaylistControllerUpdateRequest,
  requestConfig: runtime.TypedQueryConfig<T, void> = {}
): QueryConfig<T> {
  if (requestParameters.playlistId === null || requestParameters.playlistId === undefined) {
    throw new runtime.RequiredError(
      'playlistId',
      'Required parameter requestParameters.playlistId was null or undefined when calling playlistControllerUpdate.'
    );
  }

  if (requestParameters.updatePlaylistDto === null || requestParameters.updatePlaylistDto === undefined) {
    throw new runtime.RequiredError(
      'updatePlaylistDto',
      'Required parameter requestParameters.updatePlaylistDto was null or undefined when calling playlistControllerUpdate.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  headerParameters['Content-Type'] = 'application/json';

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/playlists/{playlistId}`.replace(`{${'playlistId'}}`, encodeURIComponent(String(requestParameters.playlistId))),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'PUT',
      headers: headerParameters,
    },
    body: queryParameters || UpdatePlaylistDtoToJSON(requestParameters.updatePlaylistDto),
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
  }

  return config;
}

/**
 */
export function playlistControllerUpdate<T>(
  requestParameters: PlaylistControllerUpdateRequest,
  requestConfig?: runtime.TypedQueryConfig<T, void>
): QueryConfig<T> {
  return playlistControllerUpdateRaw(requestParameters, requestConfig);
}
