// tslint:disable
/**
 * Mediashare
 * Media Share API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import { ShareItem, ShareItemFromJSON, ShareItemToJSON } from '../models';

export interface ShareItemsControllerFindOneRequest {
  shareId: string;
}

export interface ShareItemsControllerRemoveRequest {
  shareId: string;
}

/**
 */
function shareItemsControllerFindAllRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<ShareItem>> = {}
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/share-items`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ShareItemFromJSON), text);
  }

  return config;
}

/**
 */
export function shareItemsControllerFindAll<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<ShareItem>>
): QueryConfig<T> {
  return shareItemsControllerFindAllRaw(requestConfig);
}

/**
 */
function shareItemsControllerFindOneRaw<T>(
  requestParameters: ShareItemsControllerFindOneRequest,
  requestConfig: runtime.TypedQueryConfig<T, ShareItem> = {}
): QueryConfig<T> {
  if (requestParameters.shareId === null || requestParameters.shareId === undefined) {
    throw new runtime.RequiredError(
      'shareId',
      'Required parameter requestParameters.shareId was null or undefined when calling shareItemsControllerFindOne.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/share-items/{shareId}`.replace(
      `{${'shareId'}}`,
      encodeURIComponent(String(requestParameters.shareId))
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'GET',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ShareItemFromJSON(body), text);
  }

  return config;
}

/**
 */
export function shareItemsControllerFindOne<T>(
  requestParameters: ShareItemsControllerFindOneRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ShareItem>
): QueryConfig<T> {
  return shareItemsControllerFindOneRaw(requestParameters, requestConfig);
}

/**
 */
function shareItemsControllerRemoveRaw<T>(
  requestParameters: ShareItemsControllerRemoveRequest,
  requestConfig: runtime.TypedQueryConfig<T, ShareItem> = {}
): QueryConfig<T> {
  if (requestParameters.shareId === null || requestParameters.shareId === undefined) {
    throw new runtime.RequiredError(
      'shareId',
      'Required parameter requestParameters.shareId was null or undefined when calling shareItemsControllerRemove.'
    );
  }

  let queryParameters = null;

  const headerParameters: runtime.HttpHeaders = {};

  const { meta = {} } = requestConfig;

  meta.authType = ['bearer'];
  const config: QueryConfig<T> = {
    url: `${runtime.Configuration.basePath}/api/share-items/{shareId}`.replace(
      `{${'shareId'}}`,
      encodeURIComponent(String(requestParameters.shareId))
    ),
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: 'DELETE',
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ShareItemFromJSON(body), text);
  }

  return config;
}

/**
 */
export function shareItemsControllerRemove<T>(
  requestParameters: ShareItemsControllerRemoveRequest,
  requestConfig?: runtime.TypedQueryConfig<T, ShareItem>
): QueryConfig<T> {
  return shareItemsControllerRemoveRaw(requestParameters, requestConfig);
}
